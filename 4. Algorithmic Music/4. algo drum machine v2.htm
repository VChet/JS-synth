<html>
	<head>
		<script src="../NexusUI.js"></script>
	</head>
	<body style="margin:0; padding:0; color:#BBB">
		<div style="background:#272727; height:100%">
			<div style="padding:15px">
				drums
				<div id="samplesToggle"></div>
				oscillator
				<div id="oscToggle"></div>
				delay
				<div id="delaySlider"></div>
				<p>write numbers from 0 to 1 separated by comma to change sequence</p>
				hi-hat<br>
				<textarea id="hat_editor" onkeyup="updateHats()">1,1,1</textarea><br>
				snare<br>
				<textarea id="sn_editor" onkeyup="updateSnare()">1,0,0</textarea><br>
				bass<br>
				<textarea id="bd_editor" onkeyup="updateBass()">0.5,0,0,0</textarea>
			</div>
		</div>
		<script>
			// Audio Engine
			var audio_context = window.AudioContext || window.webkitAudioContext;
			var con = new audio_context(); // create the audio system
			var isPlaying = false;

			// Oscillator
			function changeNote(time) {
				freq *= 1.5;
				console.log(freq);

				if (freq > 800) {
					freq *= 0.3;
				}

				osc.frequency.value = freq;
				osc.frequency.setValueAtTime(freq, time);
			}

			var osc = con.createOscillator();
			var osc_amp = con.createGain(); // make it quieter
			var delay = con.createDelay();
			var fb = con.createGain(); // delay feedback
			var drum_gain = con.createGain();
			var comp = con.createDynamicsCompressor();

			var freq = 200;
			osc.type = "triangle";

			osc.frequency.value = freq;
			osc_amp.gain.value = 0.4;
			delay.delayTime.value = 0.25;
			fb.gain.value = 0.45;
			drum_gain.gain.value = 100;

			//osc.connect(osc_amp); // toggles by button
			osc_amp.connect(delay);
			delay.connect(fb);
			fb.connect(delay);
			delay.connect(con.destination);
			// oscillator > gain > delay > gain > (back to delay) >> output

			drum_gain.connect(comp);
			comp.connect(con.destination);
			// drums > gain > compressor > output

			osc.start();

			// Samples
			function loadSample(url, callback) {
				var request = new XMLHttpRequest();
				request.open("GET", url, true);
				request.responseType = "arraybuffer";
				request.onload = function() {
					var audioData = request.response;
					con.decodeAudioData(audioData, function(buffer) {
						callback(buffer);
					});
				}
				request.send();
			}

			function playSound(buffer, time) {
				var player = con.createBufferSource();
				player.buffer = buffer;
				player.loop = false;
				player.start(time);
				player.connect(drum_gain);
			}

			function updateHats() {
				var text = document.getElementById("hat_editor").value;
				hat_seq = text.split(",");
				//console.log("hat sequence",hat_seq);
			}

			function updateSnare() {
				var text = document.getElementById("sn_editor").value;
				sn_seq = text.split(",");
				//console.log("snare sequence",sn_seq);
			}

			function updateBass() {
				var text = document.getElementById("bd_editor").value;
				bd_seq = text.split(",");
				//console.log("bass sequence",bd_seq);
			}

			var hat;
			var snare;
			var bass;

			var hat_seq = [1,1,1];
			var sn_seq = [1,0,0];
			var bd_seq = [0.5,0,0,0];

			var step = 0;
			var interval = 0.125;

			var wait_time = 0.125;
			var got_up_to;
			var now = con.currentTime;

			loadSample("https://vchet.github.io/JS-synth/samples/hh.wav", function(buffer) {
				hat = buffer;
			});
			loadSample("https://vchet.github.io/JS-synth/samples/sn.wav", function(buffer) {
				snare = buffer;
			});
			loadSample("https://vchet.github.io/JS-synth/samples/bd.wav", function(buffer) {
				bass = buffer;
			});

			setInterval(function() {
				now = con.currentTime;
				var max_future_time = now + (wait_time * 1.5); // how far in the future we will schedule
				if (got_up_to > now) { // already scheduled up to shis point
					now = got_up_to;
				}
				while (now <= max_future_time) {
					step++;
					changeNote(now);
					if (isPlaying) {
						if (hat_seq[step % hat_seq.length] > Math.random()) {
							playSound(hat, now);
						}
						if (sn_seq[step % sn_seq.length] > Math.random()) {
							playSound(snare, now);
						}
						if (bd_seq[step % bd_seq.length] > Math.random()) {
							playSound(bass, now);
						}
					}
					now += interval;
				}
				got_up_to = now;
			}, wait_time * 1000);

			//Nexus UI
			var samplesToggle = new Nexus.Toggle('#samplesToggle')
			samplesToggle.on("change", function(state) {
				isPlaying = state;
			});

			var oscToggle = new Nexus.Toggle('#oscToggle')
			oscToggle.on("change", function(state) {
				if (state) {
					osc.connect(osc_amp);
				} else {
					osc.disconnect();
				}
			});

			var delaySlider = new Nexus.Slider("#delaySlider", {
				"value": delay.delayTime.value,
				"min": 0,
				"max": 1,
				"step": 0.05
			});
			delaySlider.on("change", function(v) {
				delay.delayTime.value = v;
			})
		</script>
	</body>
</html>
